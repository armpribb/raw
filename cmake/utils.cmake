function(custom_target_sanitize_options target)
    if(CMAKE_BUILD_TYPE MATCHES "Sanitize")
        if(MSVC)
            target_compile_options(${target} PRIVATE /fsanitize=address)
            target_link_directories(${target} PRIVATE $ENV{ProgramFiles}/LLVM/lib/clang/13.0.0/lib/windows)
            target_link_libraries(${target} PRIVATE clang_rt.asan_dynamic-x86_64 clang_rt.asan_dynamic_runtime_thunk-x86_64)
            target_link_options(${target} PRIVATE /wholearchive:clang_rt.asan_dynamic_runtime_thunk-x86_64.lib)
        else()
            if(RAW_SANITIZER_TYPE MATCHES "ASAN")
                target_compile_options(${target} PRIVATE -fsanitize=address -fno-omit-frame-pointer)
            elseif(RAW_SANITIZER_TYPE MATCHES "UBSAN")
                target_compile_options(${target} PRIVATE -fsanitize=undefined -fno-omit-frame-pointer)
            elseif(RAW_SANITIZER_TYPE MATCHES "LSAN")
                target_compile_options(${target} PRIVATE -fsanitize=leak -fno-omit-frame-pointer)
            elseif(RAW_SANITIZER_TYPE MATCHES "MSAN")
                target_compile_options(${target} PRIVATE -fsanitize=memory -fno-omit-frame-pointer -fno-optimize-sibling-calls)
            elseif(RAW_SANITIZER_TYPE MATCHES "TSAN")
                target_compile_options(${target} PRIVATE -fsanitize=thread -fno-omit-frame-pointer)
            endif()
        endif()
    endif()
endfunction()

function(custom_target_debug_options target)
    if(RAW_DEBUG_INFO)
        if(MSVC)
            target_link_options(${target} PRIVATE /DEBUG)
            target_link_options(${target} PRIVATE /OPT:NOICF)
            target_link_options(${target} PRIVATE /OPT:REF)
        else()
            target_compile_options(${target} PRIVATE -g)
        endif()
    endif()
    if(RAW_RECORD_COMPILE_SWITCHES AND NOT MSVC)
        target_compile_options(${target} PRIVATE -frecord-gcc-switches)
    endif()
endfunction()

function(custom_target_executable_properties)
endfunction()

